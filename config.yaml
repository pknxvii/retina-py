meta:
  id: retina-rag-pipeline
  version: "1.0.0"

log:
  level: DEBUG

redis:
  host: localhost
  port: 6379
  db: 0
  url: redis://localhost:6379/0

celery:
  broker_url: redis://localhost:6379/0
  result_backend: redis://localhost:6379/0

minio:
  endpoint: "localhost:9000"
  access_key: "minioadmin"
  secret_key: "minioadmin"
  bucket: "documents"
  secure: false

api:
  host: 0.0.0.0
  port: 8000
  title: "Retina RAG Pipeline API"
  debug: true

# Qdrant vector database configuration
qdrant:
  url: "http://localhost:6333"
  index: "retina_documents"
  embedding_dim: 384  # dimension for sentence-transformers/all-MiniLM-L6-v2
  recreate_index: false
  return_embedding: true
  wait_result_from_api: true

# Multi-tenancy configuration
tenancy:
  organization_prefix: "org"  # Prefix for organization-specific resources (collections, buckets)

# Haystack pipeline configuration
haystack:
  embedder:
    model: "sentence-transformers/all-MiniLM-L6-v2"
    progress_bar: false
  splitter:
    split_by: "word"
    split_length: 200
    split_overlap: 50
  cleaner:
    remove_empty_lines: true
    remove_extra_whitespaces: true
    remove_repeated_substrings: false

# LLM configuration for query pipeline
llm:
  model: "llama3.2"  # Ollama model name (e.g., llama3.2, mistral, codellama)
  base_url: "http://localhost:11434"  # Ollama server URL

# Database configuration for SQL queries
database:
  connection_string: "/path/to/your.db"  # SQLite database path
  schema: |
    -- Add your database schema here for SQL generation
    -- Example:
    -- CREATE TABLE customers (
    --   id INTEGER PRIMARY KEY,
    --   name TEXT,
    --   email TEXT,
    --   revenue DECIMAL
    -- );
    -- CREATE TABLE orders (
    --   id INTEGER PRIMARY KEY,
    --   customer_id INTEGER,
    --   amount DECIMAL,
    --   date DATE
    -- );

# Query pipeline configuration
query:
  retriever:
    top_k: 1  # Number of documents to retrieve for each query